<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (c) 2007-2013, Kaazing Corporation. All rights reserved.

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:stomp="com.kaazing.gateway.jms.client.stomp.*"  
				layout="absolute" width="940" height="600"
				backgroundGradientAlphas="[1.0, 1.0]" backgroundAlpha="0.0" backgroundGradientColors="[#FFFFFF, #FFFFFF]" backgroundColor="#FFFFFF"
				initialize="initApp()" applicationComplete="setUrl()" 
				cornerRadius="0" alpha="1.0">

    <mx:Script>
    <![CDATA[
		import com.kaazing.gateway.client.security.BasicChallengeHandler;
		import com.kaazing.gateway.client.security.ChallengeHandlers;
		import com.kaazing.gateway.client.security.DemoLoginHandler;
		import com.kaazing.gateway.client.security.impl.DefaultBasicChallengeHandler;
		import com.kaazing.gateway.jms.client.BytesMessage;
		import com.kaazing.gateway.jms.client.Connection;
		import com.kaazing.gateway.jms.client.ConnectionDisconnectedException;
        import com.kaazing.gateway.jms.client.ConnectionFactory;
		import com.kaazing.gateway.jms.client.ConnectionFailedException;
		import com.kaazing.gateway.jms.client.ConnectionFuture;
		import com.kaazing.gateway.jms.client.Destination;
		import com.kaazing.gateway.jms.client.ExceptionListenerAdapter;
        import com.kaazing.gateway.jms.client.MapMessage;
		import com.kaazing.gateway.jms.client.Message;
		import com.kaazing.gateway.jms.client.MessageConsumer;
		import com.kaazing.gateway.jms.client.MessageListenerAdapter;
		import com.kaazing.gateway.jms.client.MessageProducer;
		import com.kaazing.gateway.jms.client.Session;
		import com.kaazing.gateway.jms.client.SessionConstants;
		import com.kaazing.gateway.jms.client.TextMessage;
		import com.kaazing.gateway.jms.client.Topic;
		import com.kaazing.gateway.jms.client.TopicSubscriber;
		import com.kaazing.gateway.jms.client.VoidFuture;
		import com.kaazing.gateway.jms.client.stomp.StompInitialContext;
		
		import mx.logging.*;
		import mx.logging.targets.*;
		import mx.managers.PopUpManager;
		import mx.utils.URLUtil;


		internal var initialContext:StompInitialContext;
		internal var connection:Connection;
		internal var session:Session;
		internal var transactedSession:Session;
		internal var consumers:Dictionary;
		internal var topicSubscribers:Dictionary;
		internal var inTransaction:Boolean = false;

        private function initLogging():void {
            // Create a target.
            var logTarget:TraceTarget = new TraceTarget();

            // Log only messages for the classes in the com.kaazing.gateway.* and 
            // mx.messaging packages.
            logTarget.filters=["com.kaazing.gateway.*"];

            // Log all log levels.
            logTarget.level = LogEventLevel.INFO;

            // Add date, time, category, and log level to the output.
            logTarget.includeDate = true;
            logTarget.includeTime = true;
            logTarget.includeCategory = true;
            logTarget.includeLevel = true;

            // Begin logging.
            Log.addTarget(logTarget);
        }

		// setup login handler
        protected function initChallenge():void {
            var basicHandler:BasicChallengeHandler = new DefaultBasicChallengeHandler();
			basicHandler.setLoginHandler(new DemoLoginHandler(this));
			ChallengeHandlers.setDefault(basicHandler);
		}

    //called when the complete application has loaded
    public function setUrl():void {
        var url:String = Application.application.loaderInfo.url;
		if (URLUtil.getProtocol(url).indexOf("http") == 0) {
			// Use ws instead of http for stomp service
			var protocol:String = URLUtil.getProtocol(url).replace("http", "ws");
			location.text = protocol + "://" + URLUtil.getServerNameWithPort(url) + "/jms";
		}
		else {
			// Otherwise use a default url (e.g. when running from debugger with file: protocol)
			location.text = "ws://localhost:8001/jms";
		}
    }


    public function initApp():void {
        initLogging();
		initChallenge();
		//add event handlers for buttons:connect, disconnect
        connectButton.addEventListener("buttonDown", connectClicked);
        disconnectButton.addEventListener("buttonDown", disconnectClicked);
		startButton.addEventListener("buttonDown", startClicked);
		stopButton.addEventListener("buttonDown", stopClicked);

        //add event handlers for buttons:subscribe, send, unsubscribe
        subscribeButton.addEventListener("buttonDown", subscribeClicked);
        sendButton.addEventListener("buttonDown", sendClicked);
        unsubscribeButton.addEventListener("buttonDown", unsubscribeClicked);

        //add event handlers for buttons:begin, send, commit, abort
        beginButton.addEventListener("buttonDown", beginClicked);
        commitButton.addEventListener("buttonDown", commitClicked);
        abortButton.addEventListener("buttonDown", abortClicked);
        sendTxnButton.addEventListener("buttonDown", sendTxnClicked);

        // disable UI except for connect button
		startButton.enabled = false;
		stopButton.enabled = false;
		toggleUi(false);
        setTransactionUi();
    }

    private function loginHandler(continuation:Function):void {
        var loginWindow:LoginForm = LoginForm(PopUpManager.createPopUp(this, LoginForm, false));
        PopUpManager.centerPopUp(loginWindow);
        loginWindow.continuation = continuation;
    }


    private function connectClicked(event:Event):void {
		try {
			log("CONNECT: " + location.text);
            var locStr:String = location.text;

			/* Disable connect button */
			connectButton.enabled = false;
			disconnectButton.enabled = true;

			/* Initialize set of consumers and subscribers */
			consumers = new Dictionary();
			topicSubscribers = new Dictionary();
			inTransaction = false;

			/* Create a new connection factory with the target Gateway URL */
            var env:Dictionary = new Dictionary();
            env[StompInitialContext.PROVIDER_URL] = location.text;
            env[StompInitialContext.CONNECTION_TIMEOUT] = 5000;
            initialContext = new StompInitialContext(env);

			var connectionFactory:ConnectionFactory = initialContext.lookup("ConnectionFactory") as ConnectionFactory;

			/* Connect and authenticate */
			var username0:*= username.text.length ? username.text : null;
			var password0:*= password.text.length ? password.text : null;
			var connectionFuture:ConnectionFuture = connectionFactory.createConnection(username0, password0, function():void {
				try {
					/* Get the actual connection */
					connection = connectionFuture.get();
					connectedHandler(connection);
				}
				catch (e:Error) {
					log("CAUGHT EXCEPTION");
					exceptionListener(e);
            		toggleUi(false);
				}
			});
			
		} catch (e:Error) {
			log("CAUGHT EXCEPTION");
			exceptionListener(e);
    		toggleUi(false);
		}
    }

    private function disconnectClicked(event:Event):void {
		log("DISCONNECT");

		// disable disconnect button
		connectButton.enabled = true;
		disconnectButton.enabled = false;
		toggleUi(false);

        if (connection != null) {
    		var closeFuture:VoidFuture = connection.close(function ():void {
    			try {
    				closeFuture.checkError();
    				closedHandler(connection);
    			}
    			catch (e:Error) {
    				log("CAUGHT EXCEPTION");
    				exceptionListener(e);
    			}
    		});
        }
    }

	private function startClicked(event:Event):void {
		log("START");
		
		var startFuture:VoidFuture = connection.start(function ():void {
			try {
				startFuture.checkError();
				startedHandler(connection);
			}
			catch (e:Error) {
				log("CAUGHT EXCEPTION");
				exceptionListener(e);
			}
		});
	}
	
	private function stopClicked(event:Event):void {
		log("STOP");
		
		var stopFuture:VoidFuture = connection.stop(function ():void {
			try {
				stopFuture.checkError();
				stoppedHandler(connection);
			}
			catch (e:Error) {
				log("CAUGHT EXCEPTION");
				exceptionListener(e);
			}
		});
	}
		
    private function subscribeClicked(event:Event):void {
        log("SUBSCRIBE: " + destination.text);

		try {
			var dest:Destination = initialContext.lookup(destination.text) as Destination;
			var messageSelector:String = (selector.text != "") ? selector.text : null; 
				/* Multiple non-durable or queue consumers supported */ 
				var consumer:MessageConsumer = session.createConsumer(dest, messageSelector);
				consumer.messageListener = new MessageListenerAdapter(messageHandler);
				
				if (!consumers[destination.text]) {
					consumers[destination.text] = [];
				}
				consumers[destination.text].push(consumer);
		} catch (e:Error) {
			log("CAUGHT EXCEPTION");
			exceptionListener(e);
		}
    }

    private function unsubscribeClicked(event:Event):void {
        log("UNSUBSCRIBE: " + destination.text);

		try {
			var found:Boolean = false;
				/* Close a message consumer */
				var consumersForDestination:Array = consumers[destination.text];
				if (consumersForDestination && consumersForDestination.length > 0) {
					var consumer:MessageConsumer = consumersForDestination.pop();
					consumer.close();
					
					if (consumersForDestination.length == 0) {
						delete consumers[destination.text];
					}
					
					found = true;
				}
				else {
					log("No consumers on destination: "+destination.text);
				}
			
			if (!found) {
				var entry:String;
				for (entry in consumers) {
					log("  Consumer Destination: "+entry+" ("+consumers[entry].length+")");
				}
				for (entry in topicSubscribers) {
					log("  Subscriber Durable Name: "+entry);
				}
			}
		} catch (e:Error) {
			log("CAUGHT EXCEPTION");
			exceptionListener(e);
		}
    }

	private function sendClicked(event:Event):void {
		try {
			var dest:Destination = initialContext.lookup(destination.text) as Destination;
			
			var msg:Message;
			if (!binary.selected)
			{
				log("SEND TextMessage: " + message.text + " : " + destination.text);
				msg = session.createTextMessage(message.text);
			}
			else
			{
				var byteArray:ByteArray = new ByteArray();
				byteArray.writeUTF(message.text);
				byteArray.position = 0;
				
				log("SEND BytesMessage: [" + hexDump(byteArray) + "] : " + destination.text);
				msg = session.createBytesMessage();
				// using writeUTF on the bytesMsg to send the payload...
				(msg as BytesMessage).writeUTF(message.text);

			}

			var producer:MessageProducer = session.createProducer(dest);
			var sendFuture:VoidFuture = producer.send(msg, -1, -1, 0, function ():void {
				try {
					sendFuture.checkError();
				}
				catch (e:Error) {
					log("CAUGHT EXCEPTION");
					exceptionListener(e);
				}
			});
			producer.close();
			
		} catch (e:Error) {
			log("CAUGHT EXCEPTION");
			exceptionListener(e);
		}
	}
		
	private function beginClicked(event:Event):void {
		try {
	        log("BEGIN: " + transaction.text);
			inTransaction = true;
	        setTransactionUi();
		} catch (e:Error) {
			log("CAUGHT EXCEPTION");
			exceptionListener(e);
		}
	}

    private function sendTxnClicked(event:Event):void {
		try {
			var msg:Message;
			if (!binaryTransaction.selected)
			{
				log("SEND TextMessage: " + transaction_message.text + " " + transaction_destination.text + " " + transaction.text);
				msg = transactedSession.createTextMessage(transaction_message.text);
			}
			else
			{
				var byteArray:ByteArray = new ByteArray();
				byteArray.writeUTF(transaction_message.text);
				byteArray.position = 0;
				
				log("SEND BytesMessage: [" + hexDump(byteArray) + "] " + transaction_destination.text + " " + transaction.text);
				msg = transactedSession.createBytesMessage();
				(msg as BytesMessage).writeBytes(byteArray);
			}
	
			var destination:Destination = initialContext.lookup(transaction_destination.text) as Destination;
			var producer:MessageProducer = transactedSession.createProducer(destination);
			var sendFuture:VoidFuture = producer.send(msg, -1, -1, 0, function ():void {
				try {
					sendFuture.checkError();
				}
				catch (e:Error) {
					log("CAUGHT EXCEPTION");
					exceptionListener(e);
				}
			});
			producer.close();
		} catch (e:Error) {
			log("CAUGHT EXCEPTION");
			exceptionListener(e);
		}
    }

    private function commitClicked(event:Event):void {
        log("COMMIT: "  + transaction.text);
		commitButton.enabled = false;
		abortButton.enabled = false;
		
		var commitFuture:VoidFuture = transactedSession.commit(function ():void {
			try {
				log("COMMITTED");
				
				inTransaction = false;
				setTransactionUi();
			} catch (e:Error) {
				log("CAUGHT EXCEPTION");
				exceptionListener(e);
			}
		});
    }

    private function abortClicked(event:Event):void {
        log("ABORT: "  + transaction.text);
		commitButton.enabled = false;
		abortButton.enabled = false;

		var rollbackFuture:VoidFuture = transactedSession.rollback(function ():void {
			try {
				log("ABORTED");
	
				inTransaction = false;
				setTransactionUi();
			} catch (e:Error) {
				log("CAUGHT EXCEPTION");
				exceptionListener(e);
			}
		});
    }

	private function connectedHandler(conn:Connection):void {
		log("CONNECTED");
		
		connectButton.enabled = false;
		toggleUi(true);
		
		/* Set up listeners with appropriate callback handlers. */
		connection.exceptionListener = new ExceptionListenerAdapter(exceptionListener);
		
		/* Create the producer / consumer session */
		session = connection.createSession(false, SessionConstants.AUTO_ACKNOWLEDGE);
		
		/* Create a separate transaction (producer-only) session */
		transactedSession = connection.createSession(true, SessionConstants.SESSION_TRANSACTED);
		
		/* Start the Connection */
		var startFuture:VoidFuture = connection.start(function ():void {
			try {
				startFuture.checkError();
				startedHandler(connection);
			}
			catch (e:Error) {
				log("CAUGHT EXCEPTION");
				exceptionListener(e);
			}
		});
	}

	private function startedHandler(conn:Connection):void {
		log("STARTED");
		startButton.enabled = false;
		stopButton.enabled = true;
	}
	
	private function stoppedHandler(conn:Connection):void {
		log("STOPPED");
		startButton.enabled = true;
		stopButton.enabled = false;
	}
	
	private function closedHandler(conn:Connection):void {
		log("CLOSED");
		connectButton.enabled = true;
		startButton.enabled = false;
		stopButton.enabled = false;
		toggleUi(false);
	}
	
    private function messageHandler(message:Message):void {
        if (message is TextMessage) {
            log("RECEIVED TextMessage: "+(message as TextMessage).text);
		}
		else if (message is BytesMessage) {
			var bytes:ByteArray = new ByteArray();
			(message as BytesMessage).readBytes(bytes);
			bytes.position = 0;
            log("RECEIVED BytesMessage: [" + hexDump(bytes) + "]");
		}
        else if (message is MapMessage) {            
            var mapMessage:MapMessage = message as MapMessage;
            var arr:Array = mapMessage.getMapNames();
            for (var i:int = 0; i < arr.length; i++) {
                var key:String = arr[i];
                var value:* = mapMessage.getObject(key);
				if(value == null) {
					log(key + ": null" );
				} else if (value is ByteArray) {
                    log(key + ": [" + hexDump(value as ByteArray) + "] (ByteArray)");
                } else {
                    log(key + ": " + value.toString() + " (" + typeof value + ")");
    }
            }
            log("RECEIVED MapMessage: ");
        }
    }
    
	protected function exceptionListener(e:Error):void {
		log("EXCEPTION: " + e.message);
		
        if (e is ConnectionDisconnectedException ||
            e is ConnectionFailedException) {

            connectButton.enabled = true;
    		toggleUi(false);
        }
	}
		
    // enable or disable buttons other than connect
    public function toggleUi(b:Boolean):void {
        disconnectButton.enabled = b;
        beginButton.enabled = b;
        subscribeButton.enabled = b;
        sendButton.enabled = b;
        unsubscribeButton.enabled = b;
    }

    public function setTransactionUi():void {
        abortButton.enabled = inTransaction;
        commitButton.enabled = inTransaction;
        sendTxnButton.enabled = inTransaction;
    }


    private const LOG_LIMIT:int = 50;
    private var outputLines:Array = [];
    public function log(s:String):void {
		trace(s);
		if (s.charAt(s.length-1) != "\n") {
			s += "\n";
		}
		
        outputLines.unshift(s);
        if (outputLines.length > LOG_LIMIT) {
            outputLines.pop();
        }
        logWindow.text = outputLines.join("");
    }
    
    private function clearLogHandler(e:MouseEvent):void {
        outputLines = [];
        logWindow.text = "";
    }

	/**
	 * Returns a hex dump of this buffer.
	 *
	 * @return  the hex dump
	 */
	public function hexDump(bytes:ByteArray):String {
		if (bytes.length == 0) {
			return "empty"
		}
		
		var originalPosition:uint = bytes.position;
		
		var out:Array = []
		for (var i:int=bytes.position; i < bytes.length; i++) {
			var hex:String = bytes.readByte().toString(16);
			if (hex.length == 1) {
				hex = "0" + hex;
			}
			out.push(hex);
		}
		
		bytes.position = originalPosition;
		return out.join(" ")        
	}
	

    ]]>
    </mx:Script>

    <mx:Label x="17" y="18" text="Adobe Flex JMS Demo" fontFamily="Verdana" fontSize="18" color="#000709" fontWeight="bold" width="283"/>
    <mx:TextArea x="44" y="51" editable="false" enabled="true" wordWrap="true" width="866" height="47" borderStyle="none" backgroundAlpha="0.0" fontSize="16">
        <mx:text><![CDATA[This is a demo of a Flex JMS Web client that communicates directly with a message broker to perform Stomp commands.]]></mx:text>
    </mx:TextArea>
    <mx:Canvas x="502" y="115" width="397" height="221">
        <mx:TextArea x="28" y="6" editable="false" enabled="true" wordWrap="true" width="359" height="23" borderStyle="none" backgroundAlpha="0.0" fontSize="14">
            <mx:text>Subscribe and send messages to a destination.</mx:text>
        </mx:TextArea>
        <mx:Image x="1" y="3" source="/resources/images/sidebar_bkg.png" width="394"/>
        <mx:Image x="1" y="10" source="/resources/images/info-19x19.png" width="19" height="19"/>
        <mx:Label x="10" y="37" text="Destination" fontSize="14" fontWeight="bold"/>
		<mx:Label x="10" y="69" text="Selector" fontSize="14" fontWeight="bold"/>
        <mx:Label x="10" y="101" text="Message" fontSize="14" fontWeight="bold"/>
		<mx:Label x="10" y="163" text="Send As Binary" fontSize="14" fontWeight="bold"/>
        <mx:TextInput x="146" y="37" height="24" id="destination" text="/topic/destination"  fontSize="12" width="216"/>
		<mx:TextInput x="146" y="69" height="24" id="selector" fontSize="12" width="216"/>
        <mx:TextInput x="147" y="101" height="24" id="message" text="Hello, message"  fontSize="12" width="216"/>
		<mx:CheckBox x="148" y="164" id="binary"/>
        <mx:Button x="49" y="191" label="Subscribe" height="20" width="101" id="subscribeButton" fontSize="12"/>
        <mx:Button x="158" y="191" label="Send" height="20" id="sendButton" fontSize="12"/>
        <mx:Button x="225" y="191" label="Unsubscribe" height="20" id="unsubscribeButton" fontSize="12"/>
        <mx:Image x="0" y="25" source="/resources/images/sidebar_bkg.png" width="397" height="7"/>
    </mx:Canvas>

    <mx:Canvas x="46" y="344" width="423" height="228">
        <mx:TextArea x="28" y="6" editable="false" enabled="true" wordWrap="true" width="395" height="46" borderStyle="none" backgroundAlpha="0.0" fontSize="14">
            <mx:text>Begin, send messages to, and commit or abort a transaction. Subscribe to see committed transactions.</mx:text>
        </mx:TextArea>
        <mx:Image x="2" y="3" source="/resources/images/sidebar_bkg.png" width="420"/>
        <mx:Image x="2" y="47" source="/resources/images/sidebar_bkg.png" width="418"/>
        <mx:Image x="1" y="12" source="/resources/images/info-19x19.png" width="19" height="19"/>
        <mx:Label x="10" y="64" text="Transaction" fontSize="14" fontWeight="bold"/>
        <mx:Label x="10" y="95" text="Destination" fontSize="14" fontWeight="bold" height="21"/>
        <mx:Label x="10" y="127" text="Message" fontSize="14" fontWeight="bold"/>
        <mx:TextInput x="110" y="64" height="24" id="transaction" text="transaction#1" fontSize="12"/>
        <mx:TextInput x="110" y="95" height="24" id="transaction_destination" text="/topic/destination" fontSize="12"/>
        <mx:TextInput x="110" y="127" height="24" id="transaction_message" text="Hello, transaction" fontSize="12"/>
        <mx:Button x="28" y="189" label="Begin" height="20" id="beginButton" fontSize="12"/>
        <mx:Button x="99" y="189" label="Send" height="20" id="sendTxnButton" fontSize="12"/>
        <mx:Button x="166" y="189" label="Commit" height="20" id="commitButton" fontSize="12"/>
        <mx:Button x="250" y="189" label="Abort" height="20" id="abortButton" fontSize="12"/>
        <mx:CheckBox x="110" y="162" id="binaryTransaction"/>
        <mx:Label x="10" y="158" text="Binary" fontSize="14" fontWeight="bold"/>
    </mx:Canvas>

    <mx:Canvas x="502" y="354" width="397" height="218">
        <mx:TextArea x="28" y="6" editable="false" enabled="true" wordWrap="true" width="251" height="34" borderStyle="none" backgroundAlpha="0.0" fontSize="14">
            <mx:text>Log messages</mx:text>
        </mx:TextArea>
        <mx:Image x="1" y="3" source="/resources/images/sidebar_bkg.png" width="394"/>
        <mx:Image x="2" y="32" source="/resources/images/sidebar_bkg.png" width="395"/>
        <mx:Image x="1" y="9" source="/resources/images/info-19x19.png" width="19" height="19"/>
        <mx:TextArea x="10" y="43" width="377" height="169" wordWrap="true" editable="false" enabled="true" maxChars="100000" id="logWindow"/>
        <mx:Button x="253" y="7" label="Clear log" id="clearlog" click="clearLogHandler(event);"  height="20" fontSize="12"/>
    </mx:Canvas>
    <mx:HRule x="16" y="48" width="911"/>
    <mx:HRule x="16.5" y="95" width="911"/>
    <mx:HRule x="13" y="588" width="911"/>
    <mx:Canvas x="46" y="115" width="423" height="221" fontSize="14">
        <mx:Image x="2" y="3" source="/resources/images/sidebar_bkg.png" width="420"/>
        <mx:Image x="2" y="31" source="/resources/images/sidebar_bkg.png" width="421"/>
        <mx:Image x="1" y="8" source="/resources/images/info-19x19.png" width="19" height="19"/>
		<mx:TextArea x="34" y="6" editable="false" enabled="true" wordWrap="true" width="344" height="48" borderStyle="none" backgroundAlpha="0.0" fontSize="14" fontWeight="normal">
			<mx:text>User name and password values are optional.</mx:text>
		</mx:TextArea>
        <mx:Label x="10" y="61" text="Location" fontSize="14" fontWeight="bold"/>
        <mx:Label x="10" y="92" text="User Name" fontSize="14" fontWeight="bold"/>
        <mx:Label x="10" y="123" text="Password" fontSize="14" fontWeight="bold"/>
        <mx:TextInput x="103" y="61" height="24" id="location" text="ws://localhost:8000/stomp" fontSize="12" width="208"/>
        <mx:TextInput x="103" y="92" height="24" id="username" fontSize="12"/>
        <mx:TextInput x="103" y="123" height="24" id="password" displayAsPassword="true" fontSize="12"/>
        <mx:Button x="34" y="155" label="Connect" height="20" id="connectButton" fontSize="12"/>
        <mx:Button x="121" y="155" label="Disconnect" height="20" id="disconnectButton" fontSize="12"/>
		<mx:Button x="252" y="155" label="Start" height="20" id="startButton" fontSize="12"/>
		<mx:Button x="319" y="155" label="Stop" height="20" id="stopButton" fontSize="12"/>
    </mx:Canvas>
    <mx:Image x="16" y="60" source="/resources/images/info-19x19.png" width="19" height="19"/>
</mx:Application>
