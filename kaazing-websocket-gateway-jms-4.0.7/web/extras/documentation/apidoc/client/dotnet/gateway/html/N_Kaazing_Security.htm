<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>Kaazing.Security Namespace</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Kaazing.Security namespace" />
    <meta name="Microsoft.Help.F1" content="Kaazing.Security" />
    <meta name="Microsoft.Help.Id" content="N:Kaazing.Security" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="Kaazing.Security" />
    <meta name="file" content="N_Kaazing_Security" />
    <meta name="guid" content="N_Kaazing_Security" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="N:Kaazing.Security" />
      <MSHelp:TOCTitle Title="Kaazing.Security Namespace" />
      <MSHelp:RLTitle Title="Kaazing.Security Namespace ()" />
      <MSHelp:Keyword Index="A" Term="N:Kaazing.Security" />
      <MSHelp:Keyword Index="A" Term="frlrfKaazingSecurity" />
      <MSHelp:Keyword Index="K" Term="Kaazing.Security namespace" />
      <MSHelp:Keyword Index="F" Term="Kaazing.Security" />
      <MSHelp:Attr Name="HelpPriority" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">.NET Framework Class Library</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Kaazing.Security Namespace</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left" />
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <h1 class="heading"><span onclick="ExpandCollapse(classToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(classToggle, event)" tabindex="0"><img id="classToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Classes</span></h1><div id="classSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Class</th><th class="descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_BasicChallengeHandler.htm">BasicChallengeHandler</a></td><td><div class="summary">
            
             Challenge handler for Basic authentication as defined in <a href="http://tools.ietf.org/html/rfc2617#section-2">RFC 2617.</a><p>
             This BasicChallengeHandler can be loaded and instantiated using ChallengeHandlers.Load(),
             and registered at a location using DispatchChallengeHandler.Register(String, ChallengeHandler)}.
             </p><p>
             In addition, one can install general and realm-specific LoginHandler objects onto this
             BasicChallengeHandler to assist in handling challenges associated
             with any or specific realms.  This can be achieved using 'setLoginHandler(LoginHandler)' and
             'setRealmLoginHandler(String, LoginHandler)' methods.
             </p><p>
             The following example loads an instance of a BasicChallengeHandler, sets a login
             handler onto it and registers the basic handler at a URI location.  In this way, all attempts to access
             that URI for which the server issues "Basic" challenges are handled by the registered BasicChallengeHandler.
             </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy Code</span></th></tr><tr><td colspan="2"><pre>
             public class MyLoginHandler : LoginHandler {
               public PasswordAuthentication GetCredentials() {
                 return new PasswordAuthentication("global", "credentials".ToCharArray());
               }
             }
             BasicChallengeHandler basicHandler = ChallengeHandlers.Load&lt;BasicChallengeHandler&gt;(typeof(BasicChallengeHandler));
             basicHandler.LoginHandler = new MyLoginHandler();
             ChallengeHandlers.Default = basicHandler;
             </pre></td></tr></table></span></div><p><a href="http://tools.ietf.org/html/rfc2616">RFC 2616 - HTTP 1.1</a></p><p><a href="http://tools.ietf.org/html/rfc2617#section-2">RFC 2617 Section 2 - Basic Authentication</a></p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_ChallengeHandler.htm">ChallengeHandler</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_ChallengeHandlers.htm">ChallengeHandlers</a></td><td><div class="summary"><p>
             Responsible for both loading fresh <span class="code">ChallengeHandler</span> instances
             and managing a concept of a default challenge handler.
             </p><p>
             Managing the Default Challenge Handler: 
             This class provides a way to get and set a default challenge handler, which is always defined (never NULL).
             The internal default handler cannot handle any challenges - it is up to the application to install its own
             default challenge handler for any authentication challenge management to operate at all.
             </p><p>
             Clients with a single challenge handling strategy for all authentication challenges can simply set
             a specific challenge handler as the default using <span class="code">SetDefault(ChallengeHandler)</span>.
             For example, to register a <span class="code">BasicChallengeHandler</span>
             object to handle all authentication requests by default, one can code:
             </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy Code</span></th></tr><tr><td colspan="2"><pre>
             LoginHandler loginHandler = ...
             BasicChallengeHandler basicHandler = ChallengeHandlers.Load&lt;BasicChallengeHandler&gt;(typeof(BasicChallengeHandler));
             basicHandler.LoginHandler = loginHandler;
             ChallengeHandlers.Default = basicHandler;
             </pre></td></tr></table></span></div><p>
             Clients with location-specific challenge handling strategies for location-dependent 401 challenges can
             register a <span class="code">DispatchChallengeHandler</span> object, upon which location-specific <span class="code">ChallengeHandler</span>
             objects are then registered. This arrangement means that
             whenever a request that matches one of the specific locations encounters a 401 challenge from the server,
             the corresponding <span class="code">ChallengeHandler</span>
             object is invoked to handle the challenge.
             </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy Code</span></th></tr><tr><td colspan="2"><pre>
             DispatchChallengeHandler dispatchHandler = ChallengeHandlers.Load&lt;DispatchChallengeHandler&gt;(typeof(DispatchChallengeHandler));
             ChallengeHandlers.Default = dispatchHandler;
             LoginHandler loginHandler = ...
             
             //set a loginHandler for this location
             BasicChallengeHandler basicHandler = ChallengeHandlers.Load&lt;BasicChallengeHandler&gt;(typeof(BasicChallengeHandler));
             basicHandler.LoginHandler = loginHandler;
             dispatchHandler.Register("ws://myserver.com/*", basicHandler);
             </pre></td></tr></table></span></div><a href="http://download.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html">ServiceLoader</a></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_ChallengeRequest.htm">ChallengeRequest</a></td><td><div class="summary"><p>
             An immutable object representing the challenge presented by the server when the client accessed
             the URI represented by a location.
             </p>
             According to <a href="http://tools.ietf.org/html/rfc2617#section-1.2">RFC 2617</a>,
             <pre>
                 challenge   = auth-scheme 1*SP 1#auth-param
             </pre>
             so we model the authentication scheme and parameters in this class.
             <p>
             This class is also responsible for detecting and adapting the <span class="code">Application Basic</span>
             and <span class="code">Application Negotiate</span> authentication schemes into their <span class="code">Basic</span> and <span class="code">Negotiate</span>
             counterpart authentication schemes.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_ChallengeResponse.htm">ChallengeResponse</a></td><td><div class="summary">
            
             A challenge response contains a character array representing the response to the server,
             and a reference to the next challenge handler to handle any further challenges for the request.
            
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_DispatchChallengeHandler.htm">DispatchChallengeHandler</a></td><td><div class="summary">
            
             A DispatchChallengeHandler is responsible for dispatching challenge requests
             to appropriate challenge handlers when challenges
             arrive from specific URI locations in the authentication responses.
             <p>
             This allows clients to use specific challenge handlers to handle specific
             types of challenges at different URI locations.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_NegotiableChallengeHandler.htm">NegotiableChallengeHandler</a></td><td><div class="summary">
            
             A NegotiableChallengeHandler can be used to directly respond to
             "Negotiate" challenges, and in addition, can be used indirectly in conjunction
             with a NegotiateChallengeHandler}
             to assist in the construction of a challenge response using object identifiers.
             
             <a href="http://tools.ietf.org/html/rfc4178#section-4.2.1">See RFC 4178 Section 4.2.1 for details
                 about how the supported object identifiers contribute towards the initial context token in the challenge response.</a></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_NegotiateChallengeHandler.htm">NegotiateChallengeHandler</a></td><td><div class="summary"><p>
             A Negotiate Challenge Handler handles initial empty "Negotiate" challenges from the
             server.  It uses other "candidate" challenger handlers to assemble an initial context token
             to send to the server, and is responsible for creating a challenge response that can delegate
             to the winning candidate.
             </p><p>
             This NegotiateChallengeHandler can be loaded and instantiated using <span class="code">ChallengeHandlers.Load(Class)</span>,
             and registered at a location using <span class="code">DispatchChallengeHandler.Register(String, ChallengeHandler)</span>.
             </p><p>
             In addition, one can register more specific <span class="code">NegotiableChallengeHandler</span> objects with
             this initial <span class="code">NegotiateChallengeHandler</span> to handle initial Negotiate challenges and subsequent challenges associated
             with specific Negotiation <a href="http://tools.ietf.org/html/rfc4178#section-4.1">mechanism types / object identifiers</a>.
             </p>
             The following example establishes a Negotiation strategy at a specific URL location.
             We show the use of a <span class="code">DispatchChallengeHandler</span> to register a <span class="code">NegotiateChallengeHandler</span> at
             a specific location.  The <span class="code">NegotiateChallengeHandler</span> has a <span class="code">NegotiableChallengeHandler</span>
             instance registered as one of the potential negotiable alternative challenge handlers.
             <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy Code</span></th></tr><tr><td colspan="2"><pre>
             LoginHandler someServerLoginHandler = ...
             DispatchChallengeHandler dispatchHandler = ChallengeHandlers.Load&lt;DispatchChallengeHandler&gt;(typeof(DispatchChallengeHandler));
             ChallengeHandlers.Default = dispatchHandler;
             
             //set a loginHandler for this location
             NegotiateChallengeHandler negotiateChallengeHandler = ChallengeHandlers.Load&lt;NegotiateChallengeHandler&gt;(typeof(NegotiateChallengeHandler));
             basicHandler.LoginHandler = someServerLoginHandler;
             dispatchHandler.Register("ws://myserver.com/*", negotiateChallengeHandler);
             </pre></td></tr></table></span></div><p><a href="http://tools.ietf.org/html/rfc4559">RFC 4559 - Microsoft SPNEGO</a></p><p><a href="http://tools.ietf.org/html/rfc4178">RFC 4178 - GSS-API SPNEGO</a></p><p><a href="http://tools.ietf.org/html/rfc2743">RFC 2743 - GSS-API</a></p><p><a href="http://tools.ietf.org/html/rfc4121">RFC 4121 - Kerberos v5 GSS-API (version 2)</a></p><p><a href="http://tools.ietf.org/html/rfc2616">RFC 2616 - HTTP 1.1</a></p><p><a href="http://tools.ietf.org/html/rfc2617">RFC 2617 - HTTP Authentication</a></p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Kaazing_Security_PasswordAuthentication.htm">PasswordAuthentication</a></td><td><div class="summary">
            
             This immutable class is a data structure that encapsulates username and
             password.
            
             </div></td></tr></table></div><h1 class="heading"><span onclick="ExpandCollapse(interfaceToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(interfaceToggle, event)" tabindex="0"><img id="interfaceToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Interfaces</span></h1><div id="interfaceSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Interface</th><th class="descriptionColumn">Description</th></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_Kaazing_Security_LoginHandler.htm">LoginHandler</a></td><td><div class="summary">
            
             A login handler is responsible for obtaining credentials from an arbitrary
             source.
             <p>
             Login Handlers can be associated with one or more <span class="code">ChallengeHandler</span>
             objects, to ensure that when a Challenge Handler requires credentials for a <span class="code">ChallengeResponse</span>,
             the work is delegated to a <span class="code">LoginHandler</span>.
             </p>
             At client configuration time, a <span class="code">LoginHandler</span> can be associated with a <span class="code">ChallengeHandler</span> as follows:
             <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy Code</span></th></tr><tr><td colspan="2"><pre>
             public class MyLoginHandler : LoginHandler {
               public PasswordAuthentication GetCredentials() {
                 // Obtain credentials in an application-specific manner
                 ...
               }
             }
            
             BasicChallengeHandler basicHandler = ChallengeHandlers.Load&lt;BasicChallengeHandler&gt;(typeof(BasicChallengeHandler));
             basicHandler.LoginHandler = new MyLoginHandler();
             ChallengeHandlers.Default = basicHandler;
            
             </pre></td></tr></table></span></div></div></td></tr></table></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
      </div>
    </div>
  </body>
</html>